name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '**/*.mdx'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '**/*.mdx'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  NODE_OPTIONS: --max_old_space_size=4096

jobs:
  lint_typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: file:./tmp/ci.db
      NODE_ENV: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Run ESLint
        run: npx next lint --max-warnings=0

      - name: Type check
        run: npx tsc --noEmit --pretty false

      - name: Summarize results
        run: |
          {
            echo "## Lint & Typecheck";
            echo;
            echo "- ESLint: ✅";
            echo "- TypeScript: ✅";
          } >> "$GITHUB_STEP_SUMMARY"

  test:
    name: Unit tests (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    needs: lint_typecheck
    strategy:
      fail-fast: false
      matrix:
        node: [18, 20]
    env:
      DATABASE_URL: file:./tmp/ci.db
      NODE_ENV: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Prepare SQLite database
        run: |
          mkdir -p tmp
          npx prisma db push --skip-generate
          npm run db:seed

      - name: Run tests with coverage
        run: npm test -- --coverage --runInBand

      - name: Upload coverage
        if: ${{ matrix.node == '20' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
          if-no-files-found: error

      - name: Summarize results
        if: ${{ matrix.node == '20' }}
        run: |
          COVERAGE=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
          {
            echo "## Test Summary";
            echo;
            echo "- Node ${{ matrix.node }}: ✅";
            echo "- Line coverage: ${COVERAGE}%";
          } >> "$GITHUB_STEP_SUMMARY"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs:
      - lint_typecheck
      - test
    env:
      DATABASE_URL: file:./tmp/ci.db
      NODE_ENV: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Prepare SQLite database
        run: |
          mkdir -p tmp
          npx prisma db push --skip-generate
          npm run db:seed

      - name: Build application
        run: npm run build

      - name: Upload Next.js build
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: |
            .next
            public/sitemap*.xml
          if-no-files-found: error

      - name: Summarize results
        run: |
          {
            echo "## Build";
            echo;
            echo "- next build: ✅";
          } >> "$GITHUB_STEP_SUMMARY"

  bundle_audit:
    name: Bundle & Lighthouse audit
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30
    env:
      DATABASE_URL: file:./tmp/ci.db
      NODE_ENV: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Prepare SQLite database
        run: |
          mkdir -p tmp
          npx prisma db push --skip-generate
          npm run db:seed

      - name: Build with analyzer
        run: npm run analyze

      - name: Run bundle budget check
        run: npm run check:budgets

      - name: Start production server
        run: |
          npm run lh:serve &
          echo $! > server.pid

      - name: Wait for server
        run: npx wait-on http://127.0.0.1:3000

      - name: Lighthouse CI
        run: npm run lh:ci

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
          fi

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: |
            analyze
            .next/analyze
          if-no-files-found: warn

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: artifacts
          if-no-files-found: error

      - name: Summarize results
        run: |
          {
            echo "## Performance";
            echo;
            echo "- Bundle budgets: ✅";
            echo "- Lighthouse checks: ✅";
          } >> "$GITHUB_STEP_SUMMARY"

  dependency_audit:
    name: Dependency audit (non-blocking)
    runs-on: ubuntu-latest
    needs: lint_typecheck
    env:
      DATABASE_URL: file:./tmp/ci.db
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: npm audit
        id: audit
        continue-on-error: true
        run: |
          npm audit --omit=dev --json > audit.json || true
          jq '{metadata: .metadata, vulnerabilities: .vulnerabilities}' audit.json || true

      - name: Summarize audit
        if: steps.audit.outcome == 'success'
        run: |
          ISSUES=$(jq '([.vulnerabilities[]?.via?] | flatten | length) // 0' audit.json)
          {
            echo "## Dependency audit";
            echo;
            echo "- npm audit issues detected: ${ISSUES}";
            echo "- See audit.json artifact for details.";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit
          path: audit.json
          if-no-files-found: ignore

